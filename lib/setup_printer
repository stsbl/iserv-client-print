#!/usr/bin/perl -CSDAL

use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Net::Address::IP::Local;
use Net::CUPS;

unless (defined $ENV{SUDO_USER} and not @ARGV) {
  print STDERR "Usage: iserv_setup_printer\n";
  print STDERR "Environment: SUDO_USER\n";
  exit 1;
}

my ($ip, $room_name);

my $act = $ENV{SUDO_USER};
my ($server, $room, %printers, %exclude, %server_printers, $default_printer);

# prevent illegal account names
die "Invalid account $act!" if not $act =~ /^[a-z][a-z0-9._-]*$/;

# initialize CUPS client
my $cups = Net::CUPS->new();

sub info($)
{
  my ($info) = @_;
  print "[INFO] $info\n";
}

sub warning(@)
{
  my ($warning) = @_;
  print "[WARNING] $warning\n";
}

sub decode_json_file($)
{
  my $fn = shift;
  my $fp;
  local $SIG{__WARN__} = sub { warn(((caller 1)[3]), ": ", $fn, ": ", $_[0]) };
  open $fp, "<", $fn or warn "Cannot read from $fn: $!";
  my @res = <$fp>;
  close $fp;
  my $content = join "", @res;

  return decode_json $content;
}

sub add_printers(@)
{
  foreach my $p (@_)
  {
    info "Ignoring printer (it is locally available as IServ-Drucker)." and next if $p eq "printer";
    info "Adding printer $p.";
    $printers{$p} = 1;
  }
}

sub add_excludes(@)
{
  foreach my $p (@_)
  {
    info "Ignoring printer (it is locally available as IServ-Drucker)." and next if $p eq "printer";
    info "Adding printer $p to exclude.";
    $exclude{$p} = 1;
  }
}

sub set_default_printer($)
{
  my ($default) = @_;
  my $old = $default_printer;
  my $output;

  # workaround for IServ printer
  if ($default eq "printer")
  {
    $default_printer = "IServ-Drucker";
    $output = "IServ-Drucker (printer) is now the default printer";

    if (defined $old)
    {
      $output .= " (replacing $old).";
    } else {
      $output .= ".";
    }

    info $output;
    return;
  }

  $default_printer = $default;
  $output = "$default is now the default printer";

  if (defined $old)
  {
    $output .= " (replacing $old).";
  } else {
    $output .= ".";
  }

  info $output;
}

sub merge_json_file($)
{
  my ($file) = @_;
  my $hash = decode_json_file $file;

  if (defined $hash->{'printers'})
  {
    # result isn't always an array :/
    if (ref $hash->{'printers'} eq "ARRAY")
    {
      add_printers @{$hash->{'printers'}};
    } else {
      my @single_printer = ($hash->{'printers'});
      add_printers @single_printer;
    }
  }

  if (defined $hash->{'def'})
  {
    set_default_printer $hash->{'def'};
  }

  if (defined $hash->{'exclude'})
  {
    # result isn't always an array :/
    if (ref $hash->{'exclude'} eq "ARRAY")
    {
      add_excludes @{$hash->{'exclude'}};
    } else {
      my @single_exclude = ($hash->{'exclude'});
      add_printers @single_exclude;
    }
  }
}

sub parse_server_printers
{
  return if not -f "/var/lib/iserv/netlogon/$act/Printer Configuration/printers.json";

  info "Parsing printers.json ...";
  my $server_printer_info = decode_json_file "/var/lib/iserv/netlogon/$act/Printer Configuration/printers.json";

  if (defined $server_printer_info->{'printers'})
  {
    info "List of all server-side printers: @{ $server_printer_info->{'printers'} }";

    # result isn't always an array :/
    if (ref $server_printer_info->{'printers'} eq "ARRAY") {
      foreach my $server_printer (@{$server_printer_info->{'printers'}})
      {
        $server_printers{$server_printer} = 1;
      }
    } else {
      $server_printers{$server_printer_info->{'printers'}} = 1;
    }
  }
}

sub parse_default
{
  # read default json
  if (-f "/var/lib/iserv/netlogon/$act/Printer Configuration/default.json")
  {
    info "Parsing default.json ...";
    my $json = "/var/lib/iserv/netlogon/$act/Printer Configuration/default.json";
    my $default = decode_json_file $json;

    # determine print server
    if (defined $default->{'server'})
    {
      $server = $default->{'server'};
      info "Printer server is $server.";
    } else {
      # hardcoded
      $server = "iserv";
    }

    merge_json_file $json;
  } else {
    die "/var/lib/iserv/netlogon/$act/Printer Configuration/default.json is missing!";
  }

  # read local default json
  if (-f "/var/lib/iserv/netlogon/$act/Printer Configuration/default.local.json")
  {
    info "Parsing default.local.json ...";
    merge_json_file "/var/lib/iserv/netlogon/$act/Printer Configuration/default.local.json";
  }
}

sub parse_room
{
  return unless defined $room_name;

  if (-f "/var/lib/iserv/netlogon/$act/Printer Configuration/room/$room_name.json")
  {
    info "Parsing room/$room_name.json ...";
    merge_json_file "/var/lib/iserv/netlogon/$act/Printer Configuration/room/$room_name.json";
  }

  if (-f "/var/lib/iserv/netlogon/$act/Printer Configuration/room.local/$room_name.json")
  {
    info "Parsing room.local/$room_name.json ...";
    merge_json_file "/var/lib/iserv/netlogon/$act/Printer Configuration/room.local/$room_name.json";
  }

  if (-f "/var/lib/iserv/netlogon/$act/Printer Configuration/host/$ip.json")
  {
    info "Parsing host/$ip.json ...";
    merge_json_file "/var/lib/iserv/netlogon/$act/Printer Configuration/host/$ip.json";
  }

  if (-f "/var/lib/iserv/netlogon/$act/Printer Configuration/host.local/$ip.json")
  {
    info "Parsing host.local/$ip.json ...";
    merge_json_file "/var/lib/iserv/netlogon/$act/Printer Configuration/host.local/$ip.json";
  }

}

sub parse_group
{
  return if not -f "/var/lib/iserv/netlogon/$act/Printer Configuration/groups.json";

  # get groups of current user
  my $group_info = decode_json_file "/var/lib/iserv/netlogon/$act/Printer Configuration/groups.json";
  if (defined $group_info->{"$act"}->{'groups'})
  {
    # result isn't always an array :/
    if (ref $group_info->{"$act"}->{'groups'} eq "ARRAY")
    {
      my @groups = @{$group_info->{"$act"}->{'groups'}};
      info "User $act has groups @groups.";

      foreach my $group (@groups)
      {
        next if not -f "/var/lib/iserv/netlogon/$act/Printer Configuration/group/$group.json";
        info "Parsing group/$group.json ...";
        merge_json_file "/var/lib/iserv/netlogon/$act/Printer Configuration/group/$group.json";
      }

      foreach my $group (@groups)
      {
        next if not -f "/var/lib/iserv/netlogon/$act/Printer Configuration/group.local/$group.json";
        info "Parsing group.local/$group.json ...";
        merge_json_file "/var/lib/iserv/netlogon/$act/Printer Configuration/group.local/$group.json";
      }
    } else {
      my $group = $group_info->{"$act"}->{'groups'};
      info "user $act has group $group";

      if (-f "/var/lib/iserv/netlogon/$act/Printer Configuration/group/$group.json")
      {
        info "Parsing group/$group.json ...";
        merge_json_file "/var/lib/iserv/netlogon/$act/Printer Configuration/group/$group.json";
      }

      if (-f "/var/lib/iserv/netlogon/$act/Printer Configuration/group.local/$group.json")
      {
        info "Parsing group.local/$group.json ...";
        merge_json_file "/var/lib/iserv/netlogon/$act/Printer Configuration/group.local/$group.json";
      }

      if (-f "/var/lib/iserv/netlogon/$act/Printer Configuration/room-group/$room_name/$group.json")
      {
        info "Parsing room-group/$room_name/$group.json ...";
        merge_json_file "/var/lib/iserv/netlogon/$act/Printer Configuration/room-group/$room_name/$group.json";
      }

      if (-f "/var/lib/iserv/netlogon/$act/Printer Configuration/room-group.local/$room_name/$group.json")
      {
        info "Parsing room-group.local/$group.json ...";
        merge_json_file "/var/lib/iserv/netlogon/$act/Printer Configuration/room-group.local/$room_name/$group.json";
      }
    }
  }
}

sub parse_user
{
  if (-f "/var/lib/iserv/netlogon/$act/Printer Configuration/user/$act.json")
  {
    info "Parsing user/$act.json ...";
    merge_json_file "/var/lib/iserv/netlogon/$act/Printer Configuration/user/$act.json";
  }

  if (-f "/var/lib/iserv/netlogon/$act/Printer Configuration/user.local/$act.json")
  {
    info "Parsing user.local/$act.json ...";
    merge_json_file "/var/lib/iserv/netlogon/$act/Printer Configuration/user.local/$act.json";
  }

  if (-f "/var/lib/iserv/netlogon/$act/Printer Configuration/room-user/$act.json")
  {
    info "Parsing room-user/$room_name/$act.json ...";
    merge_json_file "/var/lib/iserv/netlogon/$act/Printer Configuration/room-user/$act.json";
  }

  if (-f "/var/lib/iserv/netlogon/$act/Printer Configuration/room-user.local/$act.json")
  {
    info "Parsing room-user.local/$act.json ...";
    merge_json_file "/var/lib/iserv/netlogon/$act/Printer Configuration/room-user.local/$act.json";
  }
}

sub finalize
{
  # remove excluded printers
  foreach my $printer (keys %printers)
  {
    (info "Deleting printer $printer, because it is in exclude list." and delete $printers{$printer}) if defined $exclude{$printer};
  }

  if (defined $default_printer)
  {
    # unset default printer it is not still there
    if (not $default_printer eq "IServ-Drucker")
    {
      (warning "Unsetting default printer, because $default_printer seems to be gone!" and undef $default_printer) if not defined $printers{$default_printer};
    }
  }

  info "Final result:";
  my @final_printers = keys %printers;
  info "Printers: @final_printers";
  my @final_exclude = keys %exclude;
  info "Exclude: @final_exclude";
  if (defined $default_printer)
  {
    info "Default printer: $default_printer";
  }
}

sub configure_cups
{
  info "Re-configuring CUPS printer.";

  my @cups_printers = $cups->getDestinations();
  my $current_printers;

  foreach my $cups_printer (@cups_printers)
  {
    $current_printers .= $cups_printer->getName()." ";
  }

  info "Printers in CUPS: $current_printers"
   if $current_printers;

  my $printer;
  my $printer_location;

  open(IN, 'LC_ALL=C lpstat -l -p|');
  while(<IN>) {
    $printer = { 'name'=>'', 'location'=>'' }  if /^\w/;
    if (/^printer\s(.+?) /) {
      next if $1 eq 'iserv';
      $printer->{name} = $1;
    } elsif (/^\s+Location:\s(.*)$/) {
      $printer->{location} = $1;
    }
    next unless $printer->{name};
    $printer_location->{$printer->{name}} = $printer->{location};
  }
  close IN;

  # delete old printers
  foreach my $cups_printer (@cups_printers)
  {
    # don't delete local iserv printer
    next if $cups_printer->getName() eq "IServ-Drucker";

    # ignore printers without location
    next if not defined $printer_location->{$cups_printer->getName()};

    # if location is not 'iserv', ignore printer
    next if not $printer_location->{$cups_printer->getName()} eq "iserv";

    # don't delete printers which do not have an equivalence on server side
    # TODO: not safe, could create printer "zombies" on clients, better add
    # printer with specific mark and select them by mark. <-- SOLVED - see above
    #next if not defined $server_printers{$cups_printer->getName()};

    info "Deleting printer ".$cups_printer->getName()." from CUPS.";
    $cups->deleteDestination($cups_printer->getName());
  }

  # add new printers
  foreach my $printer (keys %printers)
  {
    info "Adding printer $printer to CUPS.";
    # Net::CUPS sucks in adding printers, so we have to use low-level lpadmin :/
    #$cups->addDestination($printer, "IServ", $printer, "Generic PostScript Printer", "ipp://$server/printers/$printer");
    local $ENV{LC_ALL} = "C";
    system "/usr/lib/iserv/lpadmin.exp", $printer, "$printer @ $server", "ipp://$server/printers/$printer", $server;
    # start printer
    system "lpadmin", "-p", $printer, "-E";
    # set default printer
    if (defined $default_printer)
    {
      info "Setting $default_printer as server default.";
      system "lpadmin", "-d", $default_printer;
    }
  }
}

# get the room where we are
$ip = Net::Address::IP::Local->public_ipv4;
info "Current IP is $ip.";

my $room_info = decode_json_file "/var/lib/iserv/netlogon/$act/Printer Configuration/rooms.json";

if (defined $room_info->{"i$ip"}{'room'})
{
  $room_name = $room_info->{"i$ip"}{'room'};
  info "Current room is $room_name.";
} else {
  warning "Couldn't determine room name!";
}

parse_server_printers;
parse_default;
parse_room;
parse_group;
parse_user;
finalize;
configure_cups;
